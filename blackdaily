getgenv().NATIVELOADERINSTANCES = getgenv().NATIVELOADERINSTANCES or {}

if getgenv().NATIVELOADERINSTANCES and not getmetatable(getgenv().NATIVELOADERINSTANCES) then
    setmetatable(getgenv().NATIVELOADERINSTANCES, {
        __index = function(self, key)
            if key == "Len" then
                local Len = 0
                for i, v in pairs(self) do
                    Len = Len + 1
                end
                return Len
            end
            return rawget(self, key)
        end;
    })
elseif getgenv().NATIVELOADERINSTANCES and getmetatable(getgenv().NATIVELOADERINSTANCES) then
    if getgenv().NATIVELOADED then
        warn("An instance is already running.")
    end
end

script_key = script_key or ""

getgenv().NATIVESETTINGS = getgenv().NATIVESETTINGS or {
    OverwriteConfiguration = false;
    QueueOnTeleport = false;
}

loadstring([[
    function LPH_NO_VIRTUALIZE(f) return f end;
    function LPH_JIT(f) return f end;
    function LPH_JIT_MAX(f) return f end;
    function LRM_SANITIZE(...) return tostring(...) end;
]])()

local InterfaceEnabled = false

local IsInterfaceEnabled = function()
    local InterfaceEnabled = false
    if type(script_key) ~= "string" or #script_key < 16 then
        InterfaceEnabled = true
    else
        if type(script_key) == "string" and #script_key >= 16 then
            script_key = script_key:gsub("%W", "")
        end
        if type(script_key) ~= "string" or #script_key < 16 then
            InterfaceEnabled = true
        end
    end
    return InterfaceEnabled
end

InterfaceEnabled = IsInterfaceEnabled()

local Library = (getgenv and getgenv().NATIVELIBRARY) or loadstring(game:HttpGet("https://getnative.cc/script/interface", true))(getgenv().NATIVELIBRARY)
getgenv().NATIVELIBRARY = Library

local service = setmetatable({}, {
    __index = function(self, key)
        return (cloneref or function(service) return service end)(game.GetService(game, key))
    end
})

local HttpService = service.HttpService

local Cache = {
    Local = {};
}

local RootDir = "Native"
local Dir = RootDir .. "/Loader"

if not (isfile(RootDir) or isfolder(RootDir)) then
    makefolder(RootDir)
end

if not (isfile(Dir) or isfolder(Dir)) then
    makefolder(Dir)
end

local Data = {
    Input = {
        ["Loader.Load: Key"] = "";
    };
}

if isfile(Dir .. "/config.json") then
    for key, value in pairs(HttpService:JSONDecode(readfile(Dir .. "/config.json"))) do
        for key2, value2 in pairs(value) do
            if type(Data[key]) == "table" then
                if type(Data[key][key2]) == type(value2) then
                    Data[key][key2] = value2
                end
            end
        end
    end
end

local RunLoader = function()
    local Project = {
        Loader = "https://api.luarmor.net/files/v3/loaders/406c17f8609212558f42ace79eca515f.lua";
    }
    
    local GETResponse = game.HttpGet(game, Project.Loader)
    if GETResponse then
        getgenv().NATIVELOADED = true
        (loadstring or load)(GETResponse)()
    else
        warn("Could not fetch loader; Suggest switching to an executor that isn't any of the following: Solara and Xeno")
    end
end

local LoadFunction = function(Init, Window)
    Window:Destroy()
    RunLoader()
    Init:Notify({
        Name = "Loaded";
        Body = "";
        Duration = 5;
        Callback = function(self) end;
    })
    task.spawn(function()
        task.wait(2.5)
        Init:Destroy()
        getgenv().NATIVELOADERINSTANCES[Init] = nil
    end)
end

local Init = Library:Init({
    Name = "Native";
    Parent = service.CoreGui;
    Callback = function(self) end;
})

local Window = Init:CreateWindow({
    Name = "Loader";
    Visible = true;
    Silent = false;
    Asset = false;
    Keybind = Enum.KeyCode.RightShift;
    Callback = function(self) end;
})

local Loader = Window:CreateTab({
    Name = "Loader";
    Home = true;
    Icon = nil;
    LayoutOrder = 1;
    Callback = function(self) end;
})

local Load = Loader:CreateSection({
    Name = "Load";
    Visible = true;
    LayoutOrder = 1;
    Callback = function(self) end;
})

local Input = Load:CreateInput({
    Name = "Key";
    Initial = true;
    Integer = false;
    LayoutOrder = 1;
    ClearTextOnFocus = false;
    Placeholder = "Key here...";
    Value = Data.Input["Loader.Load: Key"];
    Callback = function(self, Value, Enter)
        Data.Input["Loader.Load: Key"] = Value
        Cache.script_key = Data.Input["Loader.Load: Key"]:gsub("%W", "")
    end;
})

local Button = Load:CreateButton({
    Name = "Submit Key";
    Initial = false;
    LayoutOrder = 1;
    Callback = function(self)
        script_key = Cache.script_key
        InterfaceEnabled = IsInterfaceEnabled()
        if not InterfaceEnabled then
            LoadFunction(Init, Window)
        else
            Init:Notify({
                Name = "Load";
                Body = "Invalid key input.";
                Duration = 5;
                Callback = function(self) end;
            })
        end
    end;
})

local GetKeyButton = Load:CreateButton({
    Name = "Get Key";
    Initial = false;
    LayoutOrder = 2;
    Callback = function(self)
        setclipboard("https://discord.gg/nyyvzNHVbh")
        Init:Notify({
            Name = "Copied Discord URL";
            Body = "";
            Duration = 2.5;
            Callback = function(self) end;
        })
    end;
})

if not InterfaceEnabled then
    task.spawn(function()
        RunLoader()
    end)
    Init:Destroy()
    getgenv().NATIVELOADERINSTANCES[Init] = nil
end
